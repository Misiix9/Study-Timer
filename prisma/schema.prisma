// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile data
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Password authentication
  password String?

  // User preferences stored as JSON
  preferences Json?
  timezone    String?

  // Relations
  accounts   Account[]
  sessions   Session[]
  studySessions StudySession[]
  subjects   Subject[]
  goals      Goal[]
  analytics  Analytics[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Study Timer specific models
model StudySession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  subjectId String?  @map("subject_id")
  
  // Session timing
  startTime DateTime @map("start_time")
  endTime   DateTime? @map("end_time")
  duration  Int?     // Duration in seconds
  
  // Session type and status
  type      SessionType @default(WORK)
  status    SessionStatus @default(IN_PROGRESS)
  completed Boolean @default(false)
  
  // Session metadata
  notes     String?
  
  // Pomodoro cycle tracking
  pomodoroRound Int? @map("pomodoro_round") // Which pomodoro in the cycle (1-4)
  cycleId       String? @map("cycle_id") // Groups sessions in the same pomodoro cycle
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  @@index([userId, startTime])
  @@index([subjectId, startTime])
  @@map("study_sessions")
}

model Subject {
  id       String  @id @default(cuid())
  userId   String  @map("user_id")
  name     String
  color    String? // Hex color code
  icon     String? // Icon identifier or emoji
  archived Boolean @default(false)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySessions StudySession[]
  goals         Goal[]

  @@index([userId, archived])
  @@map("subjects")
}

model Goal {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  subjectId        String?  @map("subject_id") // null for overall goals
  
  type             GoalType
  targetMinutes    Int      @map("target_minutes")
  achievedMinutes  Int      @default(0) @map("achieved_minutes")
  
  startDate        DateTime @map("start_date")
  endDate          DateTime @map("end_date")
  
  title            String?
  description      String?
  completed        Boolean  @default(false)
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([userId, type, startDate])
  @@index([subjectId, type])
  @@map("goals")
}

model Analytics {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  date              DateTime @unique
  
  // Daily metrics
  totalMinutes      Int      @default(0) @map("total_minutes")
  workMinutes       Int      @default(0) @map("work_minutes")
  breakMinutes      Int      @default(0) @map("break_minutes")
  sessionsCompleted Int      @default(0) @map("sessions_completed")
  sessionsStarted   Int      @default(0) @map("sessions_started")
  
  // Productivity metrics
  productivityScore Float?   @map("productivity_score") // 0.0 to 1.0
  focusScore        Float?   @map("focus_score") // Based on completed vs interrupted sessions
  consistencyScore  Float?   @map("consistency_score")
  
  // Peak performance time (stored as hour of day, 0-23)
  peakHours         Json?    @map("peak_hours") // Array of productive hours
  
  // Subject distribution (stored as JSON)
  subjectBreakdown  Json?    @map("subject_breakdown") // {subjectId: minutes}
  
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("analytics")
}

// Enums
enum SessionType {
  WORK
  SHORT_BREAK
  LONG_BREAK
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  INTERRUPTED
  CANCELLED
}

enum GoalType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}